plugins {
    id 'groovy'
    id 'application'
    id 'eclipse'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation "org.apache.groovy:groovy:$groovyVersion"
    implementation "org.apache.groovy:groovy-json:$groovyVersion"
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.4'

    implementation("org.languagetool:language-uk:$ltUkVersion") {
        exclude module: 'hunspell'
        exclude module: 'language-detector'
        exclude module: 'lucene-core'
        exclude group: 'org.apache.lucene'
        exclude group: 'io.grpc'
    }
    implementation ("org.languagetool:language-ru:$ltVersion") {
        exclude module: 'hunspell'
        exclude module: 'language-detector'
        exclude module: 'lucene-core'
        exclude group: 'org.apache.lucene'
        exclude group: 'io.grpc'
    }
    if( project.hasProperty('morfologik_ukrainian_lt_version') ) {
        implementation("ua.net.nlp:morfologik-ukrainian-lt:${morfologik_ukrainian_lt_version}")
    }

    implementation "ua.net.nlp:nlp_uk:$nlpUkVersion"

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.7'

    testImplementation ('org.springframework.boot:spring-boot-starter-test:3.0.1')
//    testImplementation 'org.springframework:spring-test:6.0.3'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.+'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.+'

    // This dependency is used by the application.
//    implementation 'com.google.guava:guava:31.1-jre'
}

compileGroovy {
    groovyOptions.forkOptions.jvmArgs = [ '-Dgroovy.grape.enable=false' ]
}

tasks.withType(GroovyCompile) {
    options.compilerArgs += [ '-Dgroovy.grape.enable=false' ]
}

test {
    useJUnitPlatform()
}

task copyRuntimeLibs(type: Copy) {
    into "${buildDir}/lib"
    from configurations.runtimeClasspath

    doFirst {
        delete files("${buildDir}/lib")
    }
}

application {
    // Define the main class for the application.
    mainClass = 'ua.net.nlp.api.App'
}
